trigger:
  branches:
    include:
      - main
      - dev
      - feature/*
  paths:
    exclude:
      - README.md
      - docs/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: 'production-variables'
  - name: NODE_VERSION
    value: '20.x'
  - name: TERRAFORM_VERSION
    value: '1.6.0'
  - name: BUILD_CONFIGURATION
    value: 'Release'

stages:
  - stage: Build
    displayName: 'Build and Test'
    jobs:
      - job: BuildFrontend
        displayName: 'Build React Application'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: $(NODE_VERSION)
            displayName: 'Install Node.js'

          - script: |
              npm ci
              npm run build
              npm run test -- --watchAll=false --passWithNoTests
            displayName: 'Install dependencies and build'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'dist'
              ArtifactName: 'frontend-dist'
            displayName: 'Publish build artifacts'

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/test-results.xml'
            displayName: 'Publish test results'

  - stage: Infrastructure
    displayName: 'Provision Infrastructure'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - job: TerraformDeploy
        displayName: 'Deploy with Terraform'
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: $(TERRAFORM_VERSION)
            displayName: 'Install Terraform'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              backendServiceArm: 'Azure-Service-Connection'
              backendAzureRmResourceGroupName: 'rg-terraform-state'
              backendAzureRmStorageAccountName: 'stterraformstate'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'production.terraform.tfstate'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              environmentServiceNameAzureRM: 'Azure-Service-Connection'
              commandOptions: '-var-file="environments/production.tfvars" -out=tfplan'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              environmentServiceNameAzureRM: 'Azure-Service-Connection'
              commandOptions: 'tfplan'

  - stage: Deploy
    displayName: 'Deploy Application'
    dependsOn: Infrastructure
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployWebApp
        displayName: 'Deploy to Azure App Service'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@0
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'frontend-dist'
                    downloadPath: '$(System.ArtifactsDirectory)'

                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App'
                  inputs:
                    azureSubscription: 'Azure-Service-Connection'
                    appType: 'webAppLinux'
                    appName: '$(webAppName)'
                    package: '$(System.ArtifactsDirectory)/frontend-dist'
                    runtimeStack: 'NODE|20-lts'
                    startUpCommand: 'npm run preview'

  - stage: FabricDeploy
    displayName: 'Deploy Fabric Artifacts'
    dependsOn: Deploy
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - job: DeployFabricArtifacts
        displayName: 'Deploy Microsoft Fabric Components'
        steps:
          - task: PowerShell@2
            displayName: 'Deploy Fabric Workspace'
            inputs:
              targetType: 'inline'
              script: |
                $headers = @{
                  "Authorization" = "Bearer $(FABRIC_API_TOKEN)"
                  "Content-Type" = "application/json"
                }
                
                # Deploy notebooks
                Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/fabric/notebooks" -Filter "*.ipynb" | ForEach-Object {
                  $notebook = Get-Content $_.FullName -Raw
                  $body = @{
                    displayName = $_.BaseName
                    definition = $notebook
                  } | ConvertTo-Json
                  
                  Invoke-RestMethod -Uri "https://api.fabric.microsoft.com/v1/workspaces/$(FABRIC_WORKSPACE_ID)/notebooks" `
                    -Method POST -Headers $headers -Body $body
                }
                
                # Deploy pipelines
                Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/fabric/pipelines" -Filter "*.json" | ForEach-Object {
                  $pipeline = Get-Content $_.FullName -Raw
                  Invoke-RestMethod -Uri "https://api.fabric.microsoft.com/v1/workspaces/$(FABRIC_WORKSPACE_ID)/pipelines" `
                    -Method POST -Headers $headers -Body $pipeline
                }